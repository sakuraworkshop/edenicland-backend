import sqlite3
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)  # 启用 CORS，允许所有来源的跨域请求

# 数据库文件路径
USERS_DATABASE = 'users.db'
SETTINGS_DATABASE = 'settings.db'


# 初始化用户数据库
def init_users_db():
    conn = sqlite3.connect(USERS_DATABASE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            email TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            is_active INTEGER NOT NULL DEFAULT 1
        )
    ''')
    conn.commit()
    conn.close()


# 初始化设置数据库
def init_settings_db():
    conn = sqlite3.connect(SETTINGS_DATABASE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            minecraftServerIP TEXT NOT NULL,
            mcsmApiAddress TEXT NOT NULL,
            emailServiceHost TEXT NOT NULL,
            mcsmDaemonId TEXT NOT NULL,
            emailServicePort TEXT NOT NULL,
            mcsmInstanceId TEXT NOT NULL,
            emailServiceUsername TEXT NOT NULL,
            mcsmApikey TEXT NOT NULL,
            emailServicePassword TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()


# 注册用户（用于测试，实际应用中可能需要更完善的注册逻辑）
@app.route('/auth/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    email = data.get('email')
    password = data.get('password')

    # 连接数据库
    conn = sqlite3.connect(USERS_DATABASE)
    cursor = conn.cursor()

    # 检查用户是否已存在
    cursor.execute('SELECT * FROM users WHERE username =? OR email =?', (username, email))
    existing_user = cursor.fetchone()
    if existing_user:
        conn.close()
        return jsonify({"message": "用户名或邮箱已存在"}), 400

    # 插入新用户，密码明文保存
    cursor.execute('INSERT INTO users (username, email, password, is_active) VALUES (?,?,?,?)',
                   (username, email, password, 1))
    conn.commit()
    conn.close()

    return jsonify({"message": "注册成功"}), 201


# 登录接口
@app.route('/auth/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    # 连接数据库
    conn = sqlite3.connect(USERS_DATABASE)
    cursor = conn.cursor()

    # 查询用户
    cursor.execute('SELECT * FROM users WHERE username =?', (username,))
    user = cursor.fetchone()

    if user:
        user_id, user_username, user_email, user_password, is_active = user
        # 检查用户是否被封禁
        if is_active == 0:
            conn.close()
            return jsonify({"message": "该用户已被封禁，无法登录"}), 403

        # 验证密码，直接比较明文密码
        if password == user_password:
            conn.close()
            return jsonify({"message": "登录成功"}), 200

    conn.close()
    return jsonify({"message": "用户名或密码错误"}), 401


# 保存设置接口
@app.route('/settings/save', methods=['POST'])
def save_settings():
    data = request.get_json()
    minecraftServerIP = data.get('minecraftServerIP')
    mcsmApiAddress = data.get('mcsmApiAddress')
    emailServiceHost = data.get('emailServiceHost')
    mcsmDaemonId = data.get('mcsmDaemonId')
    emailServicePort = data.get('emailServicePort')
    mcsmInstanceId = data.get('mcsmInstanceId')
    emailServiceUsername = data.get('emailServiceUsername')
    mcsmApikey = data.get('mcsmApikey')
    emailServicePassword = data.get('emailServicePassword')

    # 连接设置数据库
    conn = sqlite3.connect(SETTINGS_DATABASE)
    cursor = conn.cursor()

    # 先检查是否已有设置记录，如果有则更新，没有则插入
    cursor.execute('SELECT * FROM settings')
    existing_settings = cursor.fetchone()
    if existing_settings:
        cursor.execute('''
            UPDATE settings SET 
            minecraftServerIP =?,
            mcsmApiAddress =?,
            emailServiceHost =?,
            mcsmDaemonId =?,
            emailServicePort =?,
            mcsmInstanceId =?,
            emailServiceUsername =?,
            mcsmApikey =?,
            emailServicePassword =?
            WHERE id =?
        ''', (
            minecraftServerIP,
            mcsmApiAddress,
            emailServiceHost,
            mcsmDaemonId,
            emailServicePort,
            mcsmInstanceId,
            emailServiceUsername,
            mcsmApikey,
            emailServicePassword,
            existing_settings[0]
        ))
    else:
        cursor.execute('''
            INSERT INTO settings (
                minecraftServerIP,
                mcsmApiAddress,
                emailServiceHost,
                mcsmDaemonId,
                emailServicePort,
                mcsmInstanceId,
                emailServiceUsername,
                mcsmApikey,
                emailServicePassword
            ) VALUES (?,?,?,?,?,?,?,?,?)
        ''', (
            minecraftServerIP,
            mcsmApiAddress,
            emailServiceHost,
            mcsmDaemonId,
            emailServicePort,
            mcsmInstanceId,
            emailServiceUsername,
            mcsmApikey,
            emailServicePassword
        ))

    conn.commit()
    conn.close()

    return jsonify({"message": "设置保存成功"}), 200


# 获取设置接口
@app.route('/settings/get', methods=['GET'])
def get_settings():
    # 连接设置数据库
    conn = sqlite3.connect(SETTINGS_DATABASE)
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM settings')
    settings = cursor.fetchone()

    if settings:
        settings_data = {
            "minecraftServerIP": settings[1],
            "mcsmApiAddress": settings[2],
            "emailServiceHost": settings[3],
            "mcsmDaemonId": settings[4],
            "emailServicePort": settings[5],
            "mcsmInstanceId": settings[6],
            "emailServiceUsername": settings[7],
            "mcsmApikey": settings[8],
            "emailServicePassword": settings[9]
        }
        conn.close()
        return jsonify(settings_data), 200
    else:
        conn.close()
        return jsonify({}), 200


# 获取所有用户
@app.route('/users', methods=['GET'])
def get_users():
    conn = sqlite3.connect(USERS_DATABASE)
    cursor = conn.cursor()
    cursor.execute('SELECT id, username, email, is_active FROM users')
    users = cursor.fetchall()
    conn.close()

    user_list = []
    for user in users:
        user_dict = {
            "id": user[0],
            "username": user[1],
            "email": user[2],
            "is_banned": not user[3]
        }
        user_list.append(user_dict)

    return jsonify(user_list), 200


# 删除用户
@app.route('/users/<int:user_id>', methods=['DELETE'])
def delete_user(user_id):
    conn = sqlite3.connect(USERS_DATABASE)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM users WHERE id =?', (user_id,))
    conn.commit()
    conn.close()
    return jsonify({"message": "用户删除成功"}), 200


# 编辑用户
@app.route('/users/<int:user_id>', methods=['PUT'])
def edit_user(user_id):
    data = request.get_json()
    username = data.get('username')
    email = data.get('email')
    password = data.get('password')

    conn = sqlite3.connect(USERS_DATABASE)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET username =?, email =?, password =? WHERE id =?',
                   (username, email, password, user_id))
    conn.commit()
    conn.close()
    return jsonify({"message": "用户信息修改成功"}), 200


# 封禁用户
@app.route('/users/<int:user_id>/ban', methods=['PUT'])
def ban_user(user_id):
    conn = sqlite3.connect(USERS_DATABASE)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET is_active = 0 WHERE id =?', (user_id,))
    conn.commit()
    conn.close()
    return jsonify({"message": "用户封禁成功"}), 200


# 解封用户
@app.route('/users/<int:user_id>/unban', methods=['PUT'])
def unban_user(user_id):
    conn = sqlite3.connect(USERS_DATABASE)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET is_active = 1 WHERE id =?', (user_id,))
    conn.commit()
    conn.close()
    return jsonify({"message": "用户解封成功"}), 200


if __name__ == '__main__':
    init_users_db()  # 初始化用户数据库
    init_settings_db()  # 初始化设置数据库
    app.run(debug=True, host='127.0.0.1', port=5000)
